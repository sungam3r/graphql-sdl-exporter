name: Run unit tests

on:
  pull_request:
    branches:
      - master
      - develop
    paths:
      - src/**
      - .github/workflows/**
  # Upload code coverage results when PRs are merged
  push:
    branches:
      - master
      - develop
    paths:
      - src/**
      - .github/workflows/**

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Setup .NET Core SDKs
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: |
            3.1.x
            5.0.x
            6.0.102
          source-url: https://nuget.pkg.github.com/graphql-dotnet/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Install dependencies
        working-directory: src
        run: dotnet restore
      - name: Check formatting
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        working-directory: src
        run: |
          dotnet tool install -g dotnet-format --version 6.0.243104 --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json
          dotnet format --no-restore --verify-no-changes --severity warn whitespace || (echo "Run 'dotnet format' to fix whitespace issues" && exit 1)
          dotnet format --no-restore --verify-no-changes --severity warn analyzers || (echo "Run 'dotnet format' to fix analyzers issues" && exit 1)
          dotnet format --no-restore --verify-no-changes --severity warn style || (echo "Run 'dotnet format' to fix style issues" && exit 1)
      - name: Build solution [Release]
        working-directory: src
        run: dotnet build --no-restore -c Release
      - name: Build solution [Debug]
        working-directory: src
        run: dotnet build --no-restore -c Debug
      - name: Test solution [Debug]
        working-directory: src
        run: dotnet test --no-restore --no-build -p:CollectCoverage=true
      - name: Upload coverage to codecov
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        uses: codecov/codecov-action@v2.1.0
        with:
          files: .coverage/GraphQL.SDLExporter.Tests/coverage.net5.opencover.xml

  buildcheck:
    needs:
      - test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Pass build check
        if: ${{ needs.test.result == 'success' }}
        run: exit 0
      - name: Fail build check
        if: ${{ needs.test.result != 'success' }}
        run: exit 1
