namespace GraphQL.SDLExporter
{
    public sealed class CommandLineOptions
    {
        public CommandLineOptions() { }
        [CommandLine.Option("args", HelpText="Additional command line arguments in case of using the executable file", Required=false)]
        public string? AdditionalCommandLineArgs { get; set; }
        [CommandLine.Option("auth", HelpText="Authentication method in schema|parameter format", Required=false)]
        public string? Authentication { get; set; }
        public System.Func<string, string> ConfigureIntrospectionQuery { get; set; }
        [CommandLine.Option("out", HelpText="The output SDL file. If not specified, then the schema will be saved as <Source>." +
            "graphql", Required=false)]
        public string? GeneratedFileName { get; set; }
        [CommandLine.Option("api-path", Default="/graphql", HelpText="Relative path for GraphQL API when using --url option", Required=false)]
        public string? GraphQLRelativePath { get; set; }
        public System.Func<GraphQL.SDLExporter.CommandLineOptions, System.Net.Http.HttpClient> HttpClientFactory { get; set; }
        [CommandLine.Option("include-descriptions", HelpText="Include descriptions as comments in output file", Required=false)]
        public bool IncludeDescriptions { get; set; }
        [CommandLine.Option("introspection-file", HelpText="Allows you to specify a file with your own introspection query", Required=false)]
        public string? IntrospectionQueryFile { get; set; }
        [CommandLine.Option("url", Default="http://localhost:8088", HelpText="URL to start process", Required=false)]
        public string? ServiceUrl { get; set; }
        [CommandLine.Option("source", HelpText="Schema source - executable file or URL", Required=true)]
        public string Source { get; set; }
        [CommandLine.Option("timeout", HelpText="Timeout in seconds for generating SDL; 0 - no timeout", Required=false)]
        public int Timeout { get; set; }
        [CommandLine.Option("verbose", HelpText="Enables verbose log output", Required=false)]
        public bool Verbose { get; set; }
        [CommandLine.Text.Usage]
        public static System.Collections.Generic.IEnumerable<CommandLine.Text.Example> Examples { get; }
    }
    public sealed class SDLWriter
    {
        public SDLWriter() { }
        public GraphQL.SDLExporter.CommandLineOptions Options { get; set; }
        public int Execute() { }
    }
}